unit classeProduto;

interface

uses
  Dialogs, classeConexao;

type
  TProduto = class
  private
    // atributos da classe
    FCodigo: integer;
    FNome: string;
    FPreco: currency;
  public
    // métodos públicos da classe
    constructor Create;
    procedure Salvar(const objetoProduto: TProduto);
    function GetNome(const objetoProduto: TProduto): string;

    // propriedades da classe (semelhante aos getters and setters)
    property Codigo: integer read FCodigo write FCodigo;
    property Nome: string read FNome write FNome;
    property Preco: currency read FPreco write FPreco;
  end;

implementation

uses
  SysUtils;

{ TProduto }

constructor TProduto.Create;
begin
  // inicialização dos valores do objeto
  FCodigo := 0;
  FNome   := '';
  FPreco := 0;
end;

function TProduto.GetNome(const objetoProduto: TProduto): string;
var  conecta: TConexao;
begin
   FCodigo := objetoProduto.Codigo;
   try
     conecta := TConexao.Create;
     conecta.FDTransaction1.Connection := conecta.FDConnection1;
     conecta.FDQuery1.Transaction := conecta.FDTransaction1;
     conecta.FDQuery1.SQL.Add('select descricao from produto where codigo = ' + IntToStr(FCodigo));
     try
       conecta.FDQuery1.ExecSQL;
       result := conecta.FDQuery1.Fields[0].AsString;
     except
       result :=  '';
     end;

   finally
     FreeAndNil(conecta);
   end;
end;

procedure TProduto.Salvar(const objetoProduto: TProduto);
begin
  { a rotina para salvar o cliente no banco de dados deve ser escrita aqui
  FNome := objetoProduto.Nome;
  FPreco := objetoProduto.Cidade;
  FDConnection1 := MontaParamsConexao;
  FDTransaction1.Connection := FDConnection1;
  FDQuery1.Transaction := FDTransaction1;
  FDQuery1.SQL.Add('insert into produto values ');
  FDQuery1.SQL.Add('('+ FNome +  ',' + FPreco + ')');
  FDQuery1.ExecSQL;
  }
end;

end.
