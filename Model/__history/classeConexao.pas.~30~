unit classeConexao;

interface

uses
  Dialogs, FireDAC.Stan.Intf, System.IniFiles,
  FireDAC.Stan.Option, FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf,
  FireDAC.Stan.Def, FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys,
  FireDAC.VCLUI.Wait, FireDAC.Stan.Param, FireDAC.DatS, FireDAC.DApt.Intf,
  FireDAC.DApt, Data.DB, FireDAC.Comp.DataSet, FireDAC.Comp.Client, FireDAC.Phys.MySQL, FireDAC.Phys.MySQLDef;

type
  TConexao = class
  private

    procedure MontaParamsConexao;
    Function LeConfig : Boolean;
    Function AcessaBanco: Boolean;

  public
    varquivo: string;
    hostname: string;
    vDriverID: string;
    vusername: string;
    vpassword: string;
    vport: string;
    vendorLib: string;
    FDConnection1: TFDConnection;
    FDPhysMySQLDriverLink1: TFDPhysMySQLDriverLink;
    FDTransaction1: TFDTransaction;
    FDQuery1: TFDQuery;


    // métodos públicos da classe
    constructor Create;
    destructor Destroy;


    // propriedades da classe (semelhante aos getters and setters)
  end;

implementation

uses
  SysUtils;

{ TCliente }

function TConexao.AcessaBanco: Boolean;
begin
  IF LeConfig() then
  begin
     try
       //Passa os parâmetros para o objeto Conexão
       FDConnection1.Connected := false;
       FDConnection1.LoginPrompt := false;
       FDPhysMySQLDriverLink1.VendorLib := vendorLib;

       FDConnection1.DriverName := vDriverID;
       FDConnection1.Params.Clear;
       FDConnection1.Params.Add('Server='+ hostname);
       FDConnection1.Params.Add('Database='+ varquivo);
       FDConnection1.Params.Add('User_name='+vusername);
       FDConnection1.Params.Add('Password='+vpassword);
       FDConnection1.Params.Add('DriverID='+vDriverID);
       FDConnection1.Params.Add('Protocol=TCP');
       FDConnection1.Params.Add('Port='+vport);

        //FDConnection1.Params.Add('Database='+ Database);

        FDConnection1.Connected:=True;
     Except
        on E:Exception do
           begin
            ShowMessage('Erro ao carregar parâmetros de conexão!' + sLineBreak + E.Message);
           end;
     end;
     Result := FDConnection1.Connected;
  end
  else
  begin
      ShowMessage('Não existe o arquivo de banco de dados');
      result:=False;
  end;
end;

constructor TConexao.Create;
begin
  // inicialização dos valores do objeto
  FDConnection1:= TFDConnection.Create(nil);
  FDPhysMySQLDriverLink1:= TFDPhysMySQLDriverLink.Create(nil);
  FDTransaction1:= TFDTransaction.Create(nil);
  FDQuery1:= TFDQuery.Create(nil);
  MontaParamsConexao;
  FDTransaction1.Connection := FDConnection1;
  FDQuery1.Transaction := FDTransaction1;

end;

destructor TConexao.Destroy;
begin
   FreeAndNil(FDConnection1);
   FreeAndNil(FDPhysMySQLDriverLink1);
   FreeAndNil(FDTransaction1);
   FreeAndNil(FDQuery1);
end;
function TConexao.LeConfig: Boolean;
var
    vinis : TIniFile;
    vaqui : string;
Begin
    vaqui := GetCurrentDir;
    vaqui := Trim(vaqui);
    vendorLib := vaqui + '\libmysql.dll';
    IF Fileexists(vaqui+'\SConfig.ini') then
    Begin
        vinis := TiniFile.create(vaqui+'\SConfig.ini');
        With vinis do
        Begin
            varquivo:= ReadString('Configuracoes','Database','');
            hostname:= ReadString('Configuracoes','Server','');
            vDriverID:= ReadString('Configuracoes','DriverID','');
            vusername:= ReadString('Configuracoes','username','');
            vpassword:= ReadString('Configuracoes','password','');
            vport:= ReadString('Configuracoes','port','');
            Free;
            result := True
        end;
    end
    Else
    Begin
        result := False;
        ShowMessage('Arquivo de Configuração do Sistema não encontrado');
    end;
end;

{ a rotina para salvar o cliente no banco de dados deve ser escrita aqui
  FDConnection1 := MontaParamsConexao;
  FDTransaction1.Connection := FDConnection1;
  FDQuery1.Transaction := FDTransaction1;
  FDQuery1.SQL.Add('insert into cliente values ');
  FDQuery1.SQL.Add('('+ FNome +  ',' + FCidade +  ',' + FUF +  ')');
  FDQuery1.ExecSQL;
  }

procedure TConexao.MontaParamsConexao;
begin
 if not Acessabanco() then
 begin
   ShowMessage('Não foi possível abrir o banco de dados.');
 end;
end;

end.
